use std::{
    collections::BTreeMap,
    fs::{self, File},
    io::Write,
    path::{Path, PathBuf},
    process::Command,
};

use mspm0_data_types::Chip;

mod interrupt;
mod krate;
mod linker;
mod metadata;
mod peripheral;
mod registers;

const AUTOGENERATED_TEXT: &str =
    "// This file is autogenerated by mspm0-metapac-gen: do not edit by hand.";

fn main() -> anyhow::Result<()> {
    let mut chips = BTreeMap::new();
    let out_dir = PathBuf::from("build/mspm0-metapac");
    fs::create_dir_all(&out_dir)?;

    for f in glob::glob("build/data/*")? {
        let f = f.unwrap();

        if f.file_name()
            .unwrap()
            .to_string_lossy()
            .starts_with("ignore.")
        {
            continue;
        }

        let name = f
            .file_name()
            .unwrap()
            .to_string_lossy()
            .replace(".json", "")
            .to_lowercase();

        let chip: Chip =
            serde_json::from_str(&fs::read_to_string(&f).unwrap()).expect("Error reading chip");
        chips.insert(name, chip);
    }

    for (name, chip) in &mut chips {
        generate_chip_pac(name, chip, &out_dir);
        generate_chip_metadata(name, chip, &out_dir);
        linker::generate_device_x(name, chip, &out_dir)?;

        // TODO: Generate memory.x
    }

    registers::generate(&out_dir)?;

    krate::generate(&out_dir, &chips)?;

    // FIXME: Generate copy of files in res

    Ok(())
}

fn generate_chip_pac(name: &str, chip: &Chip, out_dir: &Path) {
    let dir = out_dir.join("src/chips").join(name);
    fs::create_dir_all(&dir).unwrap();

    let path = dir.join("pac.rs");
    let mut file = File::create(&path).unwrap();

    writeln!(&mut file, "{AUTOGENERATED_TEXT}").unwrap();
    writeln!(&mut file, "{}", interrupt::generate(chip)).unwrap();
    writeln!(&mut file, "{}", peripheral::generate(chip)).unwrap();

    drop(file);

    Command::new("rustfmt").arg(&path).output().unwrap();
}

fn generate_chip_metadata(name: &str, chip: &Chip, out_dir: &Path) {
    let dir = out_dir.join("src/chips").join(name);
    fs::create_dir_all(&dir).unwrap();

    let path = dir.join("metadata.rs");
    let mut file = File::create(&path).unwrap();

    writeln!(&mut file, "{AUTOGENERATED_TEXT}").unwrap();
    writeln!(&mut file, "{}", metadata::generate(name, chip)).unwrap();

    drop(file);

    Command::new("rustfmt").arg(&path).output().unwrap();
}
