use std::{
    fs::{self, File},
    io::Write,
    path::Path,
    process::Command,
    str::FromStr,
};

use anyhow::Context;
use chiptool::{
    generate::{self, CommonModule},
    ir, transform,
};
use proc_macro2::TokenStream;
use regex::Regex;

use crate::AUTOGENERATED_TEXT;

pub fn generate(out_dir: &Path) -> anyhow::Result<()> {
    let common = out_dir.join("src/common.rs");

    // Must create `src` directory which common is eventually written to.
    let out_dir = out_dir.join("src/peripherals");
    fs::create_dir_all(&out_dir).unwrap();

    // Common module
    fs::write(common, generate::COMMON_MODULE).unwrap();

    let options = generate::Options {
        common_module: CommonModule::External(TokenStream::from_str("crate::common").unwrap()),
    };

    for f in glob::glob("data/registers/*").unwrap() {
        let f = f.unwrap();

        if !f.is_file() {
            continue;
        }

        if f.file_name()
            .unwrap()
            .to_string_lossy()
            .starts_with("ignore.")
        {
            continue;
        }

        let ctx = format!("{:?}", f.file_name());

        let mut ir: ir::IR = serde_yaml::from_str(&fs::read_to_string(&f).unwrap())
            .context(ctx.clone())
            .expect("Error reading registers");

        transform::expand_extends::ExpandExtends {}
            .run(&mut ir)
            .unwrap();

        transform::map_names(&mut ir, |k, s| match k {
            transform::NameKind::Block => *s = s.to_string(),
            transform::NameKind::Fieldset => *s = format!("regs::{}", s),
            transform::NameKind::Enum => *s = format!("vals::{}", s),
            _ => {}
        });

        transform::sort::Sort {}.run(&mut ir).unwrap();
        transform::Sanitize {}.run(&mut ir).unwrap();

        let items = generate::render(&ir, &options)
            .context(ctx)
            .expect("Failed to generate code for peripheral");

        let name = f
            .file_name()
            .unwrap()
            .to_string_lossy()
            .replace(".yaml", ".rs");
        let path = out_dir.join(&name);
        let mut file = File::create(&path).unwrap();

        writeln!(file, "{AUTOGENERATED_TEXT}").unwrap();
        writeln!(
            file,
            r"#![allow(clippy::missing_safety_doc)]
            #![allow(clippy::identity_op)]
            #![allow(clippy::unnecessary_cast)]
            #![allow(clippy::erasing_op)]"
        )
        .unwrap();

        let items = items.to_string().replace("] ", "]\n");
        let re = Regex::new("# *! *\\[.*\\]").unwrap();
        let items = re.replace_all(&items, "");
        writeln!(file, "{items}").unwrap();

        file.flush().unwrap();
        drop(file);

        Command::new("rustfmt")
            .arg(&path)
            .spawn()
            .unwrap()
            .wait()
            .unwrap();
    }

    Ok(())
}
